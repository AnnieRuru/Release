//===== Hercules Script ======================================
//= Party vs Party
//===== By: ==================================================
//= AnnieRuru
//===== Current Version: =====================================
//= 1.0
//===== Compatible With: ===================================== 
//= Hercules 2020-09-24
//===== Description: =========================================
//= GM has to manually pick which 2 party to fight
//===== Topic ================================================
//= https://herc.ws/board/topic/19110-party-match/
//===== Additional Comments: =================================  
//= rathena conversion
//============================================================

-	script	PartyVsParty	FAKE_NPC,{
OnInit:
	.eventlasting = 1800; // 30 minutes
	.partysize = 2;
	.map$ = "guild_vs2-1";

	bindatcmd "partymatch", strnpcinfo(NPC_NAME_UNIQUE)+"::OnGMmenu", 99,99;
	setarray .available_type$,
		F_MesColor(C_LIME) +" Available"+ F_MesColor(C_BLACK),
		F_MesColor(C_RED) +" Unavailable"+ F_MesColor(C_BLACK),
		F_MesColor(C_RED) +" Offline"+ F_MesColor(C_BLACK);
	setmapflag .map$, MF_BATTLEGROUND, 2;
	setmapflag .map$, MF_NOSAVE;
	setmapflag .map$, MF_NOMEMO;
	setmapflag .map$, MF_NOWARP;
	setmapflag .map$, MF_NOWARPTO;
	setmapflag .map$, MF_NOTELEPORT;
	setmapflag .map$, MF_NOPENALTY;
	setmapflag .map$, MF_NOBRANCH;
	setmapflag .map$, MF_NOICEWALL;
	if (!$partymatchreward_itemid)
		$partymatchreward_itemid = Apple;
	end;
OnGMmenu:
	if (.start) {
		mes "The match is in progress ...";
		mes "The current score is "+ .partyAscore +":"+ .partyBscore;
		mes "Terminate ?";
		next;
		if (select("No", "Yes") == 1) close;
		if (select("Yes", "No") == 2) close;
		.skip = true;
		awake strnpcinfo(NPC_NAME);
		close;
	}
	mes "Welcome, what do you want to do?";
	callsub L_display_party_members, .partyA, "A";
	callsub L_display_party_members, .partyB, "B";
	mes " ";
	callsub L_display_prize;
	next;
	switch(select("Set Party Size = "+ .partysize, "Select Party A", "Select Party B", "Start Match", "Configure Reward")) {
	case 1:
		mes "input exact party size";
		mes "if 3vs3, input 3";
		next;
		input .partysize, 1, 12;
		goto OnGMmenu;
	case 2:
		.partyA = callsub(L_select_party, "A", .partyA, .partyB);
		goto OnGMmenu;
	case 3:
		.partyB = callsub(L_select_party, "B", .partyB, .partyA);
		goto OnGMmenu;
	case 4:
		.@conditions = 0;
		.@conditions += callsub(L_check_party, .partyA, "A");
		.@conditions += callsub(L_check_party, .partyB, "B");
		if (.@conditions < 2 || .start)
			goto OnGMmenu;
		else
			goto L_start;
	case 5:
		callsub L_display_prize;
		next;
		switch(select("Zeny = "+ F_InsertComma($partymatchreward_zeny), "Item ID = "+ getitemname($partymatchreward_itemid), "Amount = "+ $partymatchreward_amount)) {
		case 1:
			if (input(.@num, 0, MAX_ZENY))
				goto OnGMmenu;
			$partymatchreward_zeny = .@num;
			goto OnGMmenu;
		case 2:
			if (input(.@num, 1, MAX_ITEM_ID))
				goto OnGMmenu;
			if (getitemname(.@num) == "null") {
				mes "This item ID doesn't exist";
				next;
				goto OnGMmenu;
			}
			$partymatchreward_itemid = .@num;
			goto OnGMmenu;
		case 3:
			if (input(.@num, 0, 30000))
				goto OnGMmenu;
			$partymatchreward_amount = .@num;
			goto OnGMmenu;
		}
	}
	close;
L_display_prize:
	mes "Current Prize :";
	if (!$partymatchreward_zeny && !$partymatchreward_amount)
		mes F_MesColor(C_RED) +"None"+ F_MesColor(C_BLACK);
	if ($partymatchreward_zeny)
		mes "Zeny = "+ F_InsertComma($partymatchreward_zeny) +"z";
	if ($partymatchreward_amount)
		mes "Item = "+ $partymatchreward_amount +"x "+ F_MesItemInfo($partymatchreward_itemid);
	return;
L_display_party_members:
	if (!getarg(0))
		mes "Party "+ getarg(1) +" = ^FF0000None^000000";
	else {
		getpartymember getarg(0), 0;
		getpartymember getarg(0), 1;
		getpartymember getarg(0), 2;
		.@origin = getcharid(3);
		.@online = .@unavailable = 0;
		for (.@i = 0; .@i < $@partymembercount; ++.@i) {
			if (isloggedin($@partymemberaid[.@i], $@partymembercid[.@i])) {
				attachrid $@partymemberaid[.@i];
				if (getmapflag(strcharinfo(PC_MAP), MF_NOWARP)) {
					.@type[.@i] = 1;
					++.@online;
					++.@unavailable;
				}
				else {
					.@type[.@i] = 0;
					++.@online;
				}
			}
			else
				.@type[.@i] = 2;
		}
		attachrid .@origin;
		mesf "Party %s = [%s] %s%s", getarg(1), getpartyname(.partyA), ($@partymembercount == .partysize && .@online == .partysize && !.@unavailable)? F_MesColor(C_LIME) +"Ready": F_MesColor(C_RED) +"Not Qualify", F_MesColor(C_BLACK);
		mes "Online = "+ .@online +((.@unavailable)? ", Unavailable = "+ .@unavailable : "");
		for (.@i = 0; .@i < $@partymembercount; ++.@i)
			mes "- "+ $@partymembername$[.@i] + .available_type$[.@type[.@i]];
	}
	return;
L_select_party:
	mes "input a player name";
	input .@tmp$;
	if (getcharid(CHAR_ID_ACCOUNT, .@tmp$) == 0) {
		mes "player not available";
		next;
		return getarg(1);
	}
	.@partyid = getcharid(CHAR_ID_PARTY, .@tmp$);
	if (!.@partyid) {
		mes "that player doesn't have a party";
		next;
		return getarg(1);
	}
	if (.@partyid == getarg(2)) {
		mes "that player is a member on the other party";
		next;
		return getarg(1);
	}
	mes "are you sure you want the party";
	mes getpartyname(.@partyid) +" as Party "+ getarg(0) +"?";
	next;
	if (select("Yes","No") == 2)
		return getarg(1);
	return .@partyid;
L_check_party:
	if (!getarg(0)) {
		mes "Party"+ getarg(1) +" hasn't been configure";
		next;
		return false;
	}
	getpartymember getarg(0), 0;
	getpartymember getarg(0), 1;
	getpartymember getarg(0), 2;
	.@origin = getcharid(CHAR_ID_ACCOUNT);
	.@c = 0;
	for (.@i = 0; .@i < $@partymembercount; ++.@i) {
		if (isloggedin($@partymemberaid[.@i], $@partymembercid[.@i])) {
			attachrid $@partymemberaid[.@i];
			++.@online;
			if (getmapflag(strcharinfo(PC_MAP), MF_NOWARP))
				.@index[.@c++] = .@i;
		}
	}
	attachrid .@origin;
	if ($@partymembercount != .partysize) {
		mes "Party"+ getarg(1) +" has changed its party size";
		next;
		return false;
	}
	if (!.@online) {
		mes "Party"+ getarg(1) +" don't have any players online at the moment";
		next;
		return false;
	}
	if (.@online != .partysize) {
		mes "Party"+ getarg(1) +" has a few members gone offline";
		next;
		return false;
	}
	if (.@c > 0) {
		mes "Party"+ getarg(1) +" has "+ .@c +" party members not ready, still attending on other event maps";
		for (.@i = 0; .@i < .@c; ++.@i)
			mes "- "+ $@partymembername$[.@index[.@i]];
		next;
		return false;
	}
	return true;
L_register_bg_party:
	getpartymember getarg(0), 1;
	getpartymember getarg(0), 2;
	for (.@i = 0; .@i < $@partymembercount; ++.@i) {
		if (isloggedin($@partymemberaid[.@i], $@partymembercid[.@i])) {
			bg_join_team getarg(1), $@partymemberaid[.@i];
			queueadd getarg(2), $@partymemberaid[.@i];
		}
	}
	return;
L_start:
	.start = true;
	announce "Party Vs Party : ["+ getpartyname(.partyA) +"] VS ["+ getpartyname(.partyB) +"]", bc_all;
	.partyAid = bg_create_team(.map$, 13,50);
	.partyBid = bg_create_team(.map$, 86,50);
	.qpartyA = queue();
	.qpartyB = queue();
	callsub L_register_bg_party, .partyA, .partyAid, .qpartyA;
	callsub L_register_bg_party, .partyB, .partyBid, .qpartyB;
	queueopt .qpartyA, QUEUEOPT_DEATH, strnpcinfo(NPC_NAME) +"::OnpartyADead";
	queueopt .qpartyA, QUEUEOPT_LOGOUT, strnpcinfo(NPC_NAME) +"::OnpartyAQuit";
	queueopt .qpartyB, QUEUEOPT_DEATH, strnpcinfo(NPC_NAME) +"::OnpartyBDead";
	queueopt .qpartyB, QUEUEOPT_LOGOUT, strnpcinfo(NPC_NAME) +"::OnpartyBQuit";
	.partyAscore = .partyBscore = .partysize;
	bg_updatescore .map$, .partyAscore, .partyBscore;
	bg_warp .partyAid, .map$, 13,50;
	bg_warp .partyBid, .map$, 86,50;
	queueopt .qpartyA, QUEUEOPT_MAPCHANGE, strnpcinfo(NPC_NAME) +"::OnpartyAQuit";
	queueopt .qpartyB, QUEUEOPT_MAPCHANGE, strnpcinfo(NPC_NAME) +"::OnpartyBQuit";
	setwall .map$, 25,53, 8, DIR_SOUTH, false, "partyvspartyA";
	setwall .map$, 74,53, 8, DIR_SOUTH, false, "partyvspartyB";
	sleep 3000;
	for (.@i = 5; .@i > 0; --.@i) {
		mapannounce .map$, "["+ .@i +"]", bc_map;
		if (!.skip) sleep 1000;
	}
	mapannounce .map$, "Start!", bc_map;
	callsub L_showdigitall, ~.eventlasting, 2;
	delwall "partyvspartyA";
	delwall "partyvspartyB";
	if (!.skip) sleep .eventlasting * 1000;
	if ( .partyAscore > .partyBscore ) {
		announce "Party ["+ getpartyname(.partyA) +"] is victorious!", bc_all;
		callsub L_Reward, .qpartyA;
	}
	else if ( .partyBscore > .partyAscore ) {
		announce "Party ["+ getpartyname(.partyB) +"] is victorious!", bc_all;
		callsub L_Reward, .qpartyB;
	}
	else
		announce "- The match has ended in a draw! -", bc_all;
	callsub L_showdigitall, 0, 3;
	bg_warp .partyAid, "prontera",152,178;
	bg_warp .partyBid, "prontera",154,178;
	queuedel .qpartyA;
	queuedel .qpartyB;
	bg_destroy .partyAid;
	bg_destroy .partyBid;
	.partyAscore = .partyBscore = .start = .skip = .partyAid = .partyBid = .qpartyA = .qpartyB = false;
	end;
L_showdigitall:
	.@it = queueiterator(.qpartyA);
	while (.@aid = qiget(.@it)) {
		attachrid .@aid;
		bug_showdigit = true;
		showdigit getarg(0), getarg(1);
	}
	qiclear .@it;
	.@it = queueiterator(.qpartyB);
	while (.@aid = qiget(.@it)) {
		attachrid .@aid;
		bug_showdigit = true;
		showdigit getarg(0), getarg(1);
	}
	qiclear .@it;
	detachrid;
	return;
L_Reward:
	if (!$partymatchreward_zeny && !$partymatchreward_amount)
		return;
	.@it = queueiterator(getarg(0));
	while (.@aid = qiget(.@it)) {
		if ($partymatchreward_amount)
			rodex_sendmail getcharid(CHAR_ID_CHAR, .@aid), "Party Match Organiser", "Party Match Result",
				"Your party won the Party Match !!\r Here's the reward...",
				$partymatchreward_zeny, $partymatchreward_itemid, $partymatchreward_amount;
		else
			rodex_sendmail getcharid(CHAR_ID_CHAR, .@aid), "Party Match Organiser", "Party Match Result",
				"Your party won the Party Match !!\r Here's the reward...",
				$partymatchreward_zeny;
	}
	qiclear .@it;
	return;
OnpartyADead:  callsub L_Dead, .partyAscore, .qpartyA;
OnpartyBDead: callsub L_Dead, .partyBscore, .qpartyB;
L_Dead:
	set getarg(0), getarg(0) -1;
	bg_updatescore .map$, .partyAscore, .partyBscore;
	bg_leave;
	queueremove getarg(1), getcharid(CHAR_ID_ACCOUNT);
	showdigit 0, 3;
	bug_showdigit = false;
	warp "Save", 0,0;
	if (!getarg(0)) {
		.skip = true;
		awake strnpcinfo(NPC_NAME);
	}
	end;
OnpartyAQuit:  callsub L_Quit, .partyAscore, .qpartyA;
OnpartyBQuit: callsub L_Quit, .partyBscore, .qpartyB;
L_Quit:
	set getarg(0), getarg(0) -1;
	bg_updatescore .map$, .partyAscore, .partyBscore;
	percentheal 100, 100;
	bg_leave;
	queueremove getarg(1), getcharid(CHAR_ID_ACCOUNT);
	showdigit 0, 3;
	if (!getarg(0)) {
		.skip = true;
		awake strnpcinfo(NPC_NAME);
	}
	end;
OnPCLoginEvent:
	if (bug_showdigit) {
		showdigit 0, 3;
		bug_showdigit = false;
	}
	end;
OnSelectTeam:
	if (getunittype(@useskilltarget) != UNITTYPE_PC)
		end;
	if (.start)
		goto OnGMmenu;
	.@partyid = getcharid(CHAR_ID_PARTY, rid2name(@useskilltarget));
	if (!.@partyid) {
		message getcharid(CHAR_ID_ACCOUNT), "PartyVsParty: That player doesn't own a party.";
		end;
	}
	if (@useskilllv == 1) {
		if (.@partyid == .partyB) {
			message getcharid(CHAR_ID_ACCOUNT), "PartyVsParty: That player has registered on the other party.";
			end;
		}
		.partyA = .@partyid;
		message getcharid(CHAR_ID_ACCOUNT), "PartyVsParty: Registration successful as Party A.";
		end;
	}
	else if (@useskilllv == 2){
		if (.@partyid == .partyA) {
			message getcharid(CHAR_ID_ACCOUNT), "PartyVsParty: That player has registered on the other party.";
			end;
		}
		.partyB = .@partyid;
		message getcharid(CHAR_ID_ACCOUNT), "PartyVsParty: Registration successful as Party B.";
		end;
	}
	else {
		.@conditions += callsub(L_check_party, .partyA, "A");
		.@conditions += callsub(L_check_party, .partyB, "B");
		if (.@conditions < 2 || .start)
			goto OnGMmenu;
		else
			goto L_start;
	}
	end;
}
